Poem 1 (Ode to the Ocean by Pablo Neruda)

I love you, ocean, body of the world,
vast and green, where the sun goes to sleep,
and where the moon, a white disc, wakes up.
I love your salty breath, your cold caress,
the song you weave with the wind in your kelp,
your restless pulse that beats against the shore.

You are the well of life, the salty cradle
of all beginnings, where the first seed stirred,
where light ignited, where the first breath rose.
You are the mother, immense and ever-changing,
the canvas painted with the sun's last rays,
the mirror reflecting the shiver of the stars.

In your depths lie secrets, mysteries untold,
the wreckage of forgotten ships and dreams,
the silent dance of creatures with strange forms.
You are the challenge, the untamed force,
the endless horizon that beckons all who yearn,
the restless wanderer, forever free. 

Poem 2 (Stopping by Woods on a Snowy Evening by Robert Frost)

Whose woods these are I think I know.
His house is in the village though;
He will not see me stopping here
To watch his woods fill up with snow.

My little horse must think it queer
To stop without a farmhouse near
Between the woods and frozen lake
The darkest evening of the year.

He gives his harness bells a shake
To ask if there is some mistake.
The only other sound's the sweep
Of easy wind and downy flake.

The woods are lovely, dark and deep,
But I have promises to keep,
And miles to go before I sleep,
And miles to go before I sleep.










































































































//DDA Algorithm
#include<graphics.h>
#include<bits/stdc++.h>

using namespace std;

void dda(int x1,int y1, int x2,int y2){
  float dx=x2-x1;
  float dy=y2-y1;
  int steps=((abs(dx))>=abs(dy))?abs(dx):abs(dy);

  float xi=dx/steps;
  float yi=dy/steps;

  float x=x1,y=y1; 

  for(int i=0;i<steps;i++){
    putpixel(floor(x),floor(y),YELLOW);
     x+=xi;
     y+=yi;
     delay(50);
  }
}

int main(){
  int gd=DETECT,gm;
  int x1,x2,y1,y2;
  cout<<"Enter x1 and y1: ";
  cin>>x1>>y1;
  cout<<"Enter x2 and y2: ";
  cin>>x2>>y2;

  initgraph(&gd,&gm,NULL);
  dda(x1, y1, x2, y2);
  getch();
  closegraph();
  return 0;
}

//Bresenhems Algorithm
#include<bits/stdc++.h>
#include <graphics.h>
#include <conio.h>
using namespace std;

int main() {

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x = 100, y = 100, x1 = 200, y1 = 200;
    int dx, dy, p;
    dx = x1 - x;
    dy = y1 - y;
 
    p = 2 * dy - dx; //p is decision parameter

    while (x < x1)
    {
        if (p >= 0)
        {
            putpixel(x, y, 7);
            y = y + 1;
            p = p + 2 * dy - 2 * dx;
        }
        else
        {
            putpixel(x, y, 7);
            p = p + 2 * dy;
        }
        x = x + 1;
    }
    getch();
    closegraph();
}
 
//Midpoint Circle
#include <iostream>
#include <graphics.h>

void drawMidpointCircle(int x_center, int y_center, int radius) {
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y) {
        putpixel(x_center + x, y_center + y, WHITE);
        putpixel(x_center - x, y_center + y, WHITE);
        putpixel(x_center + x, y_center - y, WHITE);
        putpixel(x_center - x, y_center - y, WHITE);
        putpixel(x_center + y, y_center + x, WHITE);
        putpixel(x_center - y, y_center + x, WHITE);
        putpixel(x_center + y, y_center - x, WHITE);
        putpixel(x_center - y, y_center - x, WHITE);

        if (err <= 0) {
            y += 1; 
            err += 2*y + 1;
        }
        if (err > 0) {
            x -= 1;
            err -= 2*x + 1;
        }

        delay(100);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    int x_center, y_center, radius;

    std::cout << "Enter the center coordinates (x y): ";
    std::cin >> x_center >> y_center;
    std::cout << "Enter the radius: ";
    std::cin >> radius;

    drawMidpointCircle(x_center, y_center, radius);

    closegraph();
    return 0;
}

//Bresenhems Circle
#include <iostream>
#include <graphics.h>

void drawBresenhamCircle(int x_center, int y_center, int radius) {
    int x = 0, y = radius;
    int d = 3 - 2 * radius;

    while (x <= y) {
        putpixel(x_center + x, y_center + y, WHITE);
        putpixel(x_center - x, y_center + y, WHITE);
        putpixel(x_center + x, y_center - y, WHITE);
        putpixel(x_center - x, y_center - y, WHITE);
        putpixel(x_center + y, y_center + x, WHITE);
        putpixel(x_center - y, y_center + x, WHITE);
        putpixel(x_center + y, y_center - x, WHITE);
        putpixel(x_center - y, y_center - x, WHITE);

        if (d <= 0) {
            d = d + 4 * x + 6;
        } else {
            d = d + 4 * (x - y) + 10;
            y--;
        }
        x++;

        delay(100);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int x_center, y_center, radius;

    std::cout << "Enter the center coordinates (x y): ";
    std::cin >> x_center >> y_center;
    std::cout << "Enter the radius: ";
    std::cin >> radius;

    drawBresenhamCircle(x_center, y_center, radius);
    delay(10000);

    getch();
    closegraph();
    return 0;
}

//Ellipse Clipping
#include<iostream>
#include<graphics.h>

void drawEllipse(int xc, int yc, int rx, int ry) {
    int gm, gd = DETECT;
    initgraph(&gd, &gm, NULL);

    int x = 0, y = ry;
    int p1 = ry * ry - rx * rx * ry + 0.25 * rx * rx;

    while (2 * ry * ry * x < 2 * rx * rx * y) {
        putpixel(xc + x, yc - y, WHITE);
        delay(5);  
        putpixel(xc - x, yc - y, WHITE);
        delay(5);
        putpixel(xc + x, yc + y, WHITE);
        delay(5);
        putpixel(xc - x, yc + y, WHITE);
        delay(5);

        if (p1 < 0) {
            x++;
            p1 = p1 + 2 * ry * ry * x + ry * ry;
        }
        else {
            x++;
            y--;
            p1 = p1 + 2 * ry * ry * x - 2 * rx * rx * y + ry * ry;
        }
    }

    int p2 = ry * ry * (x + 0.5) * (x + 0.5) + rx * rx * (y - 1) * (y - 1) - rx * rx * ry * ry;

    while (y >= 0) {
        putpixel(xc + x, yc - y, WHITE);
        delay(5);
        putpixel(xc - x, yc - y, WHITE);
        delay(5);
        putpixel(xc + x, yc + y, WHITE);
        delay(5);
        putpixel(xc - x, yc + y, WHITE);
        delay(5);

        if (p2 > 0) {
            y--;
            p2 = p2 - 2 * rx * rx * y + rx * rx;
        }
        else {
            x++;
            y--;
            p2 = p2 + 2 * ry * ry * x - 2 * rx * rx * y + rx * rx;
        }
    }

    delay(5000);
    closegraph();
}

int main() {
    int xc, yc, rx, ry;
    std::cout << "Enter the center coordinates (xc, yc): ";
    std::cin >> xc >> yc;
    std::cout << "Enter the semi-major axis (rx): ";
    std::cin >> rx;
    std::cout << "Enter the semi-minor axis (ry): ";
    std::cin >> ry;

    drawEllipse(xc, yc, rx, ry);

    return 0;
}

// C++ program to implement Cohen Sutherland algorithm for line clipping.
// including libraries
#include <bits/stdc++.h>
#include <graphics.h>
using namespace std;

// Clip window boundaries
int xmin, xmax, ymin, ymax;

// Lines where co-ordinates are (x1, y1) and (x2, y2)
struct lines {
	int x1, y1, x2, y2;
};

// This will return the sign required.
int sign(int x)
{
	if (x > 0)
		return 1;
	else
		return 0;
}

// This will clip the lines as per window boundaries.
void clip(struct lines mylines)
{
	// arrays will store bits
	// Here bits implies initial Point whereas byte implies end points
	int bits[4], byte[4], i, var;
	setcolor(GREEN);

	// Finding Bits
	bits[0] = sign(xmin - mylines.x1);
	byte[0] = sign(xmin - mylines.x2);
	bits[1] = sign(mylines.x1 - xmax);
	byte[1] = sign(mylines.x2 - xmax);
	bits[2] = sign(ymin - mylines.y1);
	byte[2] = sign(ymin - mylines.y2);
	bits[3] = sign(mylines.y1 - ymax);
	byte[3] = sign(mylines.y2 - ymax);

	// initial will used for initial coordinates and end for final
	string initial = "", end = "", temp = "";

	// convert bits to string to find region of each point of each line
	for (i = 0; i < 4; i++) {
		if (bits[i] == 0)
			initial += '0';
		else
			initial += '1';
	}
	for (i = 0; i < 4; i++) {
		if (byte[i] == 0)
			end += '0';
		else
			end += '1';
	}

	// finding slope of line y=mx+c as (y-y1)=m(x-x1)+c
	// where m is slope m=dy/dx;

	float m = (mylines.y2 - mylines.y1) / (float)(mylines.x2 - mylines.x1);
	float c = mylines.y1 - m * mylines.x1;

	// if both points are inside the Accept the line and draw
	if (initial == end && end == "0000") {
		// inbuilt function to draw the line from(x1, y1) to (x2, y2)
		line(mylines.x1, mylines.y1, mylines.x2, mylines.y2);
		return;
	}

	// this will contain cases where line maybe totally outside for partially inside
	else {
		// taking bitwise end of every value
		for (i = 0; i < 4; i++) {

			int val = (bits[i] & byte[i]);
			if (val == 0)
				temp += '0';
			else
				temp += '1';
		}
		// as per algo if AND is not 0000 means line is completely outside hence draw nothing and return
		if (temp != "0000")
			return;

		// Here contain cases of partial inside or outside
		// So check for every boundary one by one
		for (i = 0; i < 4; i++) {
			// if both bit are same hence we cannot find any intersection with boundary so continue
			if (bits[i] == byte[i])
				continue;
			// Otherwise there exist a intersection

			// Case when initial point is in left xmin
			if (i == 0 && bits[i] == 1) {
				var = round(m * xmin + c);
				mylines.y1 = var;
				mylines.x1 = xmin;
			}
			// Case when final point is in left xmin
			if (i == 0 && byte[i] == 1) {
				var = round(m * xmin + c);
				mylines.y2 = var;
				mylines.x2 = xmin;
			}
			// Case when initial point is in right of xmax
			if (i == 1 && bits[i] == 1) {
				var = round(m * xmax + c);
				mylines.y1 = var;
				mylines.x1 = xmax;
			}
			// Case when final point is in right of xmax
			if (i == 1 && byte[i] == 1) {
				var = round(m * xmax + c);
				mylines.y2 = var;
				mylines.x2 = xmax;
			}
			// Case when initial point is in top of ymin
			if (i == 2 && bits[i] == 1) {
				var = round((float)(ymin - c) / m);
				mylines.y1 = ymin;
				mylines.x1 = var;
			}
			// Case when final point is in top of ymin
			if (i == 2 && byte[i] == 1) {
				var = round((float)(ymin - c) / m);
				mylines.y2 = ymin;
				mylines.x2 = var;
			}
			// Case when initial point is in bottom of ymax
			if (i == 3 && bits[i] == 1) {
				var = round((float)(ymax - c) / m);
				mylines.y1 = ymax;
				mylines.x1 = var;
			}
			// Case when final point is in bottom of ymax
			if (i == 3 && byte[i] == 1) {
				var = round((float)(ymax - c) / m);
				mylines.y2 = ymax;
				mylines.x2 = var;
			}
			// Updating Bits at every point
			bits[0] = sign(xmin - mylines.x1);
			byte[0] = sign(xmin - mylines.x2);
			bits[1] = sign(mylines.x1 - xmax);
			byte[1] = sign(mylines.x2 - xmax);
			bits[2] = sign(ymin - mylines.y1);
			byte[2] = sign(ymin - mylines.y2);
			bits[3] = sign(mylines.y1 - ymax);
			byte[3] = sign(mylines.y2 - ymax);
		} // end of for loop
		// Initialize initial and end to NULL
		initial = "", end = "";
		// Updating strings again by bit
		for (i = 0; i < 4; i++) {
			if (bits[i] == 0)
				initial += '0';
			else
				initial += '1';
		}
		for (i = 0; i < 4; i++) {
			if (byte[i] == 0)
				end += '0';
			else
				end += '1';
		}
		// If now both points lie inside or on boundary then simply draw the updated line
		if (initial == end && end == "0000") {
			line(mylines.x1, mylines.y1, mylines.x2, mylines.y2);
			return;
		}
		// else line was completely outside hence rejected
		else
			return;
	}
}

// Driver Function
int main()
{
	int gd = DETECT, gm;

	// Setting values of Clipping window
	xmin = 200;
	xmax = 500;
	ymin = 100;
	ymax = 400;

	// initialize the graph
	initgraph(&gd, &gm, NULL);

	// Drawing Window using Lines
	line(xmin, ymin, xmax, ymin);
	line(xmax, ymin, xmax, ymax);
	line(xmax, ymax, xmin, ymax);
	line(xmin, ymax, xmin, ymin);

	// Assume 4 lines to be clipped
	struct lines mylines[5];

	// Setting the coordinated of 4 lines
	mylines[0].x1 = 300;
	mylines[0].y1 = 200;
	mylines[0].x2 = 400;
	mylines[0].y2 = 300;

	mylines[1].x1 = 100;
	mylines[1].y1 = 250;
	mylines[1].x2 = 600;
	mylines[1].y2 = 250;

	mylines[2].x1 = 300;
	mylines[2].y1 = 300;
	mylines[2].x2 = 450;
	mylines[2].y2 = 450;

	mylines[3].x1 = 150;
	mylines[3].y1 = 450;
	mylines[3].x2 = 600;
	mylines[3].y2 = 450;

    mylines[4].x1 = 250;
	mylines[4].y1 = 50;
	mylines[4].x2 = 450;
	mylines[4].y2 = 450;

	// Drawing Initial Lines without clipping
	for (int i = 0; i < 5; i++) {
		line(mylines[i].x1, mylines[i].y1,
			mylines[i].x2, mylines[i].y2);
		delay(1000);
	}

	// Drawing clipped Line
	for (int i = 0; i < 5; i++) {
		// Calling clip() which in term clip the line as per window and draw it
		clip(mylines[i]);
		delay(1000);
	}
	delay(4000);
	getch();
	// For Closing the graph.
	closegraph();
	return 0;
}

//Midpoint Line Clipping
#include <graphics.h>
#include <iostream>

using namespace std;

// Define clipping window dimensions
#define X_MIN 100
#define X_MAX 400
#define Y_MIN 100
#define Y_MAX 400

// Function to compute region code for a point (x, y)
int compute_code(int x, int y)
{
    int code = 0;
    if (x < X_MIN)
        code |= 1; // LEFT
    else if (x > X_MAX)
        code |= 2; // RIGHT
    if (y < Y_MIN)
        code |= 4; // BOTTOM
    else if (y > Y_MAX)
        code |= 8; // TOP
    return code;
}

// Function to clip a line segment (x1, y1)-(x2, y2) against a viewport using Mid-Point algorithm
void mid_point_clip(int x1, int y1, int x2, int y2)
{
    int code1 = compute_code(x1, y1);
    int code2 = compute_code(x2, y2);
    bool accept = false;

    while (true)
    {
        if (!(code1 | code2))
        {
            accept = true;
            break;
        }
        else if (code1 & code2)
        {
            break;
        }
        else
        {
            int code_out = code1 ? code1 : code2;

            int x = x1;
            int y = y1;

            if (code_out & 8) // TOP
            {
                x = x1 + (x2 - x1) * (Y_MAX - y1) / (y2 - y1);
                y = Y_MAX;
            }
            else if (code_out & 4) // BOTTOM
            {
                x = x1 + (x2 - x1) * (Y_MIN - y1) / (y2 - y1);
                y = Y_MIN;
            }
            else if (code_out & 2) // RIGHT
            {
                y = y1 + (y2 - y1) * (X_MAX - x1) / (x2 - x1);
                x = X_MAX;
            }
            else if (code_out & 1) // LEFT
            {
                y = y1 + (y2 - y1) * (X_MIN - x1) / (x2 - x1);
                x = X_MIN;
            }
            if (code_out == code1)
            {
                x1 = x;
                y1 = y;
                code1 = compute_code(x1, y1);
            }
            else
            {
                x2 = x;
                y2 = y;
                code2 = compute_code(x2, y2);
            }
        }
    }

    if (accept)
    {
        setcolor(YELLOW);
        line(x1, y1, x2, y2);
    }
    else
    {
        cout << "Line segment is outside the viewport and rejected." << endl;
    }
}

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    rectangle(X_MIN, Y_MIN, X_MAX, Y_MAX);

    int x1 = 150, y1 = 70, x2 = 160, y2 = 340;
    setcolor(WHITE);
    line(x1, y1, x2, y2);

    mid_point_clip(x1, y1, x2, y2);

    delay(15000);
    closegraph();
    return 0;
}

//Polygon Clipping
#include <iostream>
#include <vector>
#include <graphics.h>

using namespace std;

struct Point {
    int x, y;
};

void drawPolygon(const vector<Point> &polygon, int color) {
    for (size_t i = 0; i < polygon.size(); ++i) {
        size_t next = (i + 1) % polygon.size();
        line(polygon[i].x, polygon[i].y, polygon[next].x, polygon[next].y);
    }
}

vector<Point> clipPolygonLiangBarsky(double xMin, double yMin, double xMax, double yMax, const vector<Point> &polygon) {
    vector<Point> clippedPolygon;

    for (size_t i = 0; i < polygon.size(); ++i) {
        size_t next = (i + 1) % polygon.size();

        int x1 = polygon[i].x, y1 = polygon[i].y;
        int x2 = polygon[next].x, y2 = polygon[next].y;

        int dx = x2 - x1;
        int dy = y2 - y1;

        double p[4] = {-dx, dx, -dy, dy};
        double q[4] = {x1 - xMin, xMax - x1, y1 - yMin, yMax - y1};

        double t1 = 0, t2 = 1;

        for (int j = 0; j < 4; ++j) {
            if (p[j] == 0) {
                if (q[j] < 0) {
                    // Line is parallel and outside the clipping window
                    return clippedPolygon;
                }
            } else {
                double t = q[j] / p[j];
                if (p[j] < 0 && t > t1) t1 = t;
                else if (p[j] > 0 && t < t2) t2 = t;
            }
        }

        if (t1 <= t2) {
            Point clipped1;
            clipped1.x = x1 + t1 * dx;
            clipped1.y = y1 + t1 * dy;

            Point clipped2;
            clipped2.x = x1 + t2 * dx;
            clipped2.y = y1 + t2 * dy;

            clippedPolygon.push_back(clipped1);
            clippedPolygon.push_back(clipped2);
        }
    }

    return clippedPolygon;
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    // Define the clipping window
    double xMin = 100, yMin = 100, xMax = 400, yMax = 400;
    rectangle(xMin, yMin, xMax, yMax);

    // Define a polygon (in clockwise order)
    vector<Point> polygon = {
        {50, 200},
        {200, 400},
        {350, 200},
        {200, 50}};

    // Draw the original polygon in blue
    setcolor(GREEN);
    drawPolygon(polygon, GREEN);

    delay(1000);

    // Clip the polygon
    vector<Point> clippedPolygon = clipPolygonLiangBarsky(xMin, yMin, xMax, yMax, polygon);

    // Draw the clipped polygon in red
    setcolor(YELLOW);
    drawPolygon(clippedPolygon, YELLOW);

    delay(10000);

    closegraph();
    return 0;
}

// 2D
#include <GL/glut.h>
#include <cmath>

void drawSquare() {
    glBegin(GL_QUADS);
    glVertex2f(-0.3, 0.3);
    glVertex2f(0.3, 0.3);
    glVertex2f(0.3, -0.3);
    glVertex2f(-0.3, -0.3);
    glEnd();
}

void drawCircle(float radius, int segments) {
    glBegin(GL_TRIANGLE_FAN);
    for (int i = 0; i <= segments; ++i) {
        float theta = 2.0f * 3.1415926f * float(i) / float(segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(x, y);
    }
    glEnd();
}

void drawTriangle() {
    glBegin(GL_TRIANGLES);
    glVertex2f(0.0, 0.3);
    glVertex2f(-0.3, -0.3);
    glVertex2f(0.3, -0.3);
    glEnd();
}

void drawPentagon() {
    glBegin(GL_POLYGON);
    for (int i = 0; i < 5; ++i) {
        float angle = 2 * 3.1415926f / 5 * i;
        glVertex2f(cosf(angle) * 0.3, sinf(angle) * 0.3);
    }
    glEnd();
}

void drawHexagon() {
    glBegin(GL_POLYGON);
    for (int i = 0; i < 6; ++i) {
        float angle = 2 * 3.1415926f / 6 * i;
        glVertex2f(cosf(angle) * 0.3, sinf(angle) * 0.3);
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw hexagon
    glColor3f(0.0, 1.0, 0.0); // Green
    glPushMatrix();
    glTranslatef(0.0, 0.7, 0.0);
    drawHexagon();
    glPopMatrix();

    // Draw circle
    glColor3f(1.0, 0.0, 1.0); // Magenta
    glPushMatrix();
    glTranslatef(-0.7, 0.0, 0.0);
    drawCircle(0.3, 30);
    glPopMatrix();

    // Draw triangle
    glColor3f(1.0, 1.0, 0.0); // Yellow
    glPushMatrix();
    glTranslatef(0.7, 0.0, 0.0);
    drawTriangle();
    glPopMatrix();

    // Draw square
    glColor3f(1.0, 0.0, 0.0); // Red
    drawSquare();

    // Draw pentagon
    glColor3f(0.0, 0.0, 1.0); // Blue
    glPushMatrix();
    glTranslatef(0.0, -0.7, 0.0);
    drawPentagon();
    glPopMatrix();

    glFlush();
}

void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set clear color to black
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0); // Set viewing area dimensions
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500); // Set window size
    glutInitWindowPosition(100, 100); // Set window position
    glutCreateWindow("Different Shapes in OpenGL"); // Create a window with the given title
    init(); // Initialize OpenGL
    glutDisplayFunc(display); // Register display callback function
    glutMainLoop(); // Enter the main event loop
    return 0;
}

//2DR
#include <iostream>
#include <vector>
#include <cmath>

struct Point {
    double x;
    double y;
};

std::vector<std::vector<double>> constructClockwiseRotationMatrix(double angle) {
    double radian = angle * M_PI / 180.0;
    double cosAngle = std::cos(radian);
    double sinAngle = std::sin(radian);
    
    std::vector<std::vector<double>> matrix = {
        {cosAngle, sinAngle, 0},
        {-sinAngle, cosAngle, 0},
        {0, 0, 1}
    };
    return matrix;
}

Point applyTransformation(const std::vector<std::vector<double>>& matrix, const Point& point) {
    Point result;
    result.x = matrix[0][0] * point.x + matrix[0][1] * point.y + matrix[0][2];
    result.y = matrix[1][0] * point.x + matrix[1][1] * point.y + matrix[1][2];
    return result;
}

int main() {
    // Define the points
    Point points[] = {{2, 3}, {5, 5}, {4, 3}};
    Point center = {1, 1};
    
    // Calculate the clockwise rotation matrix
    double angle = 45; // in degrees
    std::vector<std::vector<double>> clockwiseRotationMatrix = constructClockwiseRotationMatrix(angle);

    for (const auto& point : points) {
        Point rotatedPoint = applyTransformation(clockwiseRotationMatrix, {point.x - center.x, point.y - center.y});
        rotatedPoint.x += center.x;
        rotatedPoint.y += center.y;
        std::cout << "Clockwise Rotated point: (" << rotatedPoint.x << ", " << rotatedPoint.y << ")" << std::endl;
    }

    return 0;
}

//2DS
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Define a structure to represent a point
struct Point {
    double x;
    double y;
};

// Function to calculate the center of the square
Point calculateCenter(const vector<Point>& square) {
    Point center;
    center.x = (square[0].x + square[1].x + square[2].x + square[3].x) / 4.0;
    center.y = (square[0].y + square[1].y + square[2].y + square[3].y) / 4.0;
    return center;
}

// Function to construct the scaling transformation matrix
vector<vector<double>> constructScalingMatrix(double Sx, double Sy) {
    vector<vector<double>> matrix = {
        {Sx, 0, 0},
        {0, Sy, 0},
        {0, 0, 1}
    };
    return matrix;
}

// Function to apply transformation matrix to a point
Point applyTransformation(const vector<vector<double>>& matrix, const Point& point) {
    Point result;
    result.x = matrix[0][0] * point.x + matrix[0][1] * point.y + matrix[0][2];
    result.y = matrix[1][0] * point.x + matrix[1][1] * point.y + matrix[1][2];
    return result;
}

int main() {
    // Define the square
    vector<Point> square = {{1, 1}, {3, 1}, {3, 3}, {1, 3}};
    
    // Calculate the center of the square
    Point center = calculateCenter(square);

    // Calculate the scaling factors
    double Sx = 0.5, Sy = 0.5;

    // Construct the scaling transformation matrix
    vector<vector<double>> scalingMatrix = constructScalingMatrix(Sx, Sy);

    // Apply the scaling transformation matrix to each corner of the square
    vector<Point> scaledSquare;
    for (const auto& point : square) {
        Point translatedPoint = {point.x - center.x, point.y - center.y};
        Point scaledPoint = applyTransformation(scalingMatrix, translatedPoint);
        scaledPoint.x += center.x;
        scaledPoint.y += center.y;
        scaledSquare.push_back(scaledPoint);
    }

    // Print the coordinates of the scaled square
    cout << "Coordinates of the scaled square:" << endl;
    for (int i = 0; i < scaledSquare.size(); ++i) {
        cout << "Point " << i + 1 << ": (" << scaledSquare[i].x << ", " << scaledSquare[i].y << ")" << endl;
    }

    return 0;
}

//2DT
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Define a structure to represent a point
struct Point {
    double x;
    double y;
};

// Function to perform scaling on a point
void scale(Point& point, double Sx, double Sy) {
    point.x *= Sx;
    point.y *= Sy;
}

// Function to perform rotation on a point around an arbitrary point
void rotate(Point& point, double angle, double pivot_x, double pivot_y) {
    double radian = angle * M_PI / 180.0;
    double cosAngle = cos(radian);
    double sinAngle = sin(radian);

    double translated_x = point.x - pivot_x;
    double translated_y = point.y - pivot_y;

    point.x = translated_x * cosAngle - translated_y * sinAngle + pivot_x;
    point.y = translated_x * sinAngle + translated_y * cosAngle + pivot_y;
}

// Function to perform translation on a point
void translate(Point& point, double Tx, double Ty) {
    point.x += Tx;
    point.y += Ty;
}

int main() {
    vector<Point> triangle = { {3, 5}, {4, 8}, {9, 8} };
    double Sx = 5, Sy = 7;
    // Arbitrary point for rotation
    double pivot_x = 10, pivot_y = 7;
    double rotation_angle = -60; // negative for clockwise rotation
    double Tx = 5, Ty = 6;
    for (auto& point : triangle) {
        scale(point, Sx, Sy);
        rotate(point, rotation_angle, pivot_x, pivot_y);
        translate(point, Tx, Ty);
    }

    // Print the coordinates of the transformed triangle
    cout << "Coordinates of the transformed triangle:" << endl;
    int point_index = 1;
    for (const auto& point : triangle) {
        cout << "Point " << point_index++ << ": (" << point.x << ", " << point.y << ")" << endl;
    }

    return 0;
}

//3D
#include <GL/glut.h>

const int screenWidth = 800;
const int screenHeight = 600;

void drawCube(float size) {
    glutWireCube(size * 1.25); 
}

void drawSphere(float radius) {
    glutWireSphere(radius * 1.25, 10, 10); 
}

void drawCone(float baseRadius, float height) {
    glutWireCone(baseRadius * 1.25, height * 1.25, 10, 10); 
}

void drawTorus(float innerRadius, float outerRadius) {
    glutWireTorus(innerRadius * 1.25, outerRadius * 1.25, 10, 10);
}

void drawCylinder(GLdouble baseRadius, GLdouble topRadius, GLdouble height) {
    GLUquadric* quad = gluNewQuadric();
    gluQuadricDrawStyle(quad, GLU_LINE); // Wireframe
    // Increased baseRadius, topRadius, and height by 25%
    gluCylinder(quad, baseRadius * 1.25, topRadius * 1.25, height * 1.25, 12, 2);
    gluDeleteQuadric(quad);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    gluLookAt(0.0, 0.0, 5.0,  // Eye position
              0.0, 0.0, 0.0,  // Center position
              0.0, 1.0, 0.0); // Up vector


    
    glColor3f(1.0f, 0.0f, 0.0f); // Red
    glPushMatrix();
    glTranslatef(-2.5f, 0.0f, 0.0f);
    drawCube(0.5); 
    glPopMatrix();

    
    glColor3f(0.0f, 1.0f, 0.0f); // Green
    glPushMatrix();
    glTranslatef(-0.75f, 0.0f, 0.0f);
    drawSphere(0.25); 
    glPopMatrix();

    
    glColor3f(0.0f, 0.0f, 1.0f); // Blue
    glPushMatrix();
    glTranslatef(1.25f, 0.0f, 0.0f);
    drawCone(0.25, 0.5); 
    glPopMatrix();

    
    glColor3f(1.0f, 0.5f, 0.0f); // Orange
    glPushMatrix();
    glTranslatef(3.0f, 0.0f, 0.0f);
    drawTorus(0.1, 0.25); 
    glPopMatrix();

    
    glColor3f(1.0f, 1.0f, 0.0f); // Yellow
    glPushMatrix();
    glTranslatef(0.0f, -1.25f, 0.0f);
    drawCylinder(0.25, 0.25, 0.5); 
    glPopMatrix();

    glFlush();
}

void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (double)width / (double)height, 1.0, 10.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(screenWidth, screenHeight);
    glutCreateWindow("3D Shapes Example");

    glEnable(GL_DEPTH_TEST); // Enable depth testing
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    glutMainLoop();
    return 0;
}

// 3DR
#include <iostream>
#include <cmath>

using namespace std;

// Define a 3D point
struct Point {
    double x, y, z;
};

// Function to perform rotation about the z-axis
void rotateZ(Point& p, double theta) {
    double newX = p.x * cos(theta) - p.y * sin(theta);
    double newY = p.x * sin(theta) + p.y * cos(theta);
    p.x = newX;
    p.y = newY;
}

int main() {
    // Define a point
    Point p = {1, 2, 3};

    // Rotation angle (in radians)
    double theta = M_PI / 4;  // 45 degrees

    // Perform rotation
    rotateZ(p, theta);

    // Print the rotated point
    cout << "Rotated Point: (" << p.x << ", " << p.y << ", " << p.z << ")" << endl;

    return 0;
}

//3DS
#include <iostream>

using namespace std;

// Define a 3D point
struct Point {
    double x, y, z;
};

// Function to perform scaling
void scale(Point& p, double sx, double sy, double sz) {
    p.x *= sx;
    p.y *= sy;
    p.z *= sz;
}

int main() {
    // Define a point
    Point p = {1, 2, 3};

    // Scaling factors
    double sx = 2, sy = 0.5, sz = 3;

    // Perform scaling
    scale(p, sx, sy, sz);

    // Print the scaled point
    cout << "Scaled Point: (" << p.x << ", " << p.y << ", " << p.z << ")" << endl;

    return 0;
}

//3DT
#include <iostream>

using namespace std;

// Define a 3D point
struct Point {
    double x, y, z;
};

// Function to perform translation
void translate(Point& p, double dx, double dy, double dz) {
    p.x += dx;
    p.y += dy;
    p.z += dz;
}

int main() {
    // Define a point
    Point p = {1, 2, 3};

    // Translation amounts
    double dx = 2, dy = -1, dz = 3;

    // Perform translation
    translate(p, dx, dy, dz);

    // Print the translated point
    cout << "Translated Point: (" << p.x << ", " << p.y << ", " << p.z << ")" << endl;

    return 0;
}